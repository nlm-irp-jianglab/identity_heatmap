{"version":3,"sources":["Heatmap.js","App.js","index.js"],"names":["Heatmap","matrixData","setMatrixData","useState","sequenceOrder","setSequenceOrder","renamed","setRenamed","showUpper","setShowUpper","domainStart","setDomainStart","domainEnd","setDomainEnd","color1","setColor1","color2","setColor2","fontSize","setFontSize","labelFontSize","setLabelFontSize","fontFamily","setFontFamily","heatmapWidth","setHeatmapWidth","heatmapHeight","setHeatmapHeight","margin","top","right","bottom","left","getColorScale","useCallback","d3","domain","range","drawHeatmap","selectAll","remove","length","topRow","slice","labelToIndex","forEach","label","i","colorScale","g","append","attr","concat","displayLabels","map","lab","x","padding","y","cellsData","j","rowLabel","colLabel","rowIndex","colIndex","val","parseFloat","push","rowOriginal","colOriginal","rowDisplay","colDisplay","value","filteredCells","filter","d","data","enter","bandwidth","style","bgColor","color","r","b","getTextColor","text","toFixed","legendSvg","legendScale","legendAxis","ticks","call","useEffect","draggingItemIndexRef","useRef","handleDragOver","e","preventDefault","React","createElement","className","type","onChange","Number","target","onClick","downloadSVG","heatmapSvg","document","querySelector","legendContainer","getElementById","heatmapRect","getBoundingClientRect","legendRect","offsetX","offsetY","finalWidth","Math","max","width","finalHeight","height","finalSvg","createElementNS","setAttribute","ceil","heatmapClone","cloneNode","legendClone","appendChild","source","XMLSerializer","serializeToString","svgBlob","Blob","url","URL","createObjectURL","downloadLink","href","download","body","click","removeChild","Fragment","SequenceOrderList","marginBottom","index","displayName","key","draggable","onDragStart","current","handleDragStart","onDragOver","onDrop","handleDrop","dropIndex","dragIndex","newOrder","reorderList","list","fromIndex","toIndex","updated","moved","splice","cursor","maxWidth","renameSequence","original","newName","prev","_objectSpread","[object Object]","background","borderRadius","border","CSVReader","onFileLoaded","nonEmpty","row","some","cell","initialLabels","id","Draggable","position","App","csv","trim","split","line","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b78d1a52.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport CSVReader from \"react-csv-reader\";\nimport * as d3 from \"d3\";\nimport Draggable from \"react-draggable\";\n\nconst Heatmap = () => {\n  const [matrixData, setMatrixData] = useState([]);\n  const [sequenceOrder, setSequenceOrder] = useState([]); // Single order for rows & columns\n  const [renamed, setRenamed] = useState({});\n  const [showUpper, setShowUpper] = useState(true);\n\n  // Domain, Colors\n  const [domainStart, setDomainStart] = useState(0);\n  const [domainEnd, setDomainEnd] = useState(100);\n  const [color1, setColor1] = useState(\"#08306b\");\n  const [color2, setColor2] = useState(\"#ffffff\");\n\n  // Text styles\n  const [fontSize, setFontSize] = useState(12);\n  const [labelFontSize, setLabelFontSize] = useState(12);\n  const [fontFamily, setFontFamily] = useState(\"Arial\");\n\n  // === NEW: Let users specify heatmap size (with default 360) ===\n  const [heatmapWidth, setHeatmapWidth] = useState(360);\n  const [heatmapHeight, setHeatmapHeight] = useState(360);\n\n  // Margins\n  const margin = { top: 50, right: 80, bottom: 120, left: 120 };\n\n  // ====== CSV Loading ======\n  const handleFileLoad = (data) => {\n    // Remove empty rows\n    const nonEmpty = data.filter((row) => row.some((cell) => cell !== \"\"));\n    setMatrixData(nonEmpty);\n\n    if (nonEmpty.length > 1) {\n      // For a symmetrical NxN matrix,\n      // the top row (minus the top-left cell) are the labels\n      const initialLabels = nonEmpty[0].slice(1);\n      setSequenceOrder(initialLabels);\n    }\n  };\n\n  // ====== Helper: rename logic ======\n  const renameSequence = (original, newName) => {\n    setRenamed((prev) => ({ ...prev, [original]: newName }));\n  };\n\n  // ====== Color scale & text color ======\n  const getColorScale = useCallback(() => {\n    return d3.scaleLinear().domain([domainStart, domainEnd]).range([color1, color2]);\n  }, [domainStart, domainEnd, color1, color2]);\n\n  const getTextColor = (bgColor) => {\n    const color = d3.color(bgColor);\n    if (!color) return \"black\";\n    const luminance = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\n    return luminance > 150 ? \"black\" : \"white\";\n  };\n\n  // ====== Draw Heatmap ======\n  const drawHeatmap = useCallback(() => {\n    // Clear existing\n    d3.select(\"#heatmap\").selectAll(\"*\").remove();\n    d3.select(\"#legend-svg\").selectAll(\"*\").remove();\n\n    if (!matrixData.length || sequenceOrder.length < 2) return;\n\n    // Build a lookup from label -> index in matrixData\n    const topRow = matrixData[0].slice(1); // all labels\n    const labelToIndex = {};\n    topRow.forEach((label, i) => {\n      labelToIndex[label] = i + 1; // +1 because col 0 is the row labels\n    });\n\n    // Build color scale\n    const colorScale = getColorScale();\n\n    // Prepare main SVG\n    const svg = d3\n      .select(\"#heatmap\")\n      .append(\"svg\")\n      .attr(\"width\", heatmapWidth + margin.left + margin.right)\n      .attr(\"height\", heatmapHeight + margin.top + margin.bottom);\n\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    // The display labels reflect renaming\n    const displayLabels = sequenceOrder.map((lab) => renamed[lab] || lab);\n\n    // Create scales based on user-specified width/height\n    const x = d3\n      .scaleBand()\n      .range([0, heatmapWidth])\n      .domain(displayLabels)\n      .padding(0.05);\n\n    const y = d3\n      .scaleBand()\n      .range([0, heatmapHeight])\n      .domain(displayLabels)\n      .padding(0.05);\n\n    // Build cell data\n    const cellsData = [];\n    for (let i = 0; i < sequenceOrder.length; i++) {\n      for (let j = 0; j < sequenceOrder.length; j++) {\n        const rowLabel = sequenceOrder[i];\n        const colLabel = sequenceOrder[j];\n        const rowIndex = labelToIndex[rowLabel];\n        const colIndex = labelToIndex[colLabel];\n        if (rowIndex && colIndex) {\n          const val = parseFloat(matrixData[rowIndex][colIndex]) || 0;\n          cellsData.push({\n            rowOriginal: rowLabel,\n            colOriginal: colLabel,\n            rowDisplay: renamed[rowLabel] || rowLabel,\n            colDisplay: renamed[colLabel] || colLabel,\n            value: val,\n            i,\n            j,\n          });\n        }\n      }\n    }\n\n    // Filter for upper or lower triangle\n    const filteredCells = cellsData.filter((d) =>\n      showUpper ? d.i <= d.j : d.i >= d.j\n    );\n\n    // Rects\n    g.selectAll(\".cell\")\n      .data(filteredCells)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (d) => x(d.colDisplay))\n      .attr(\"y\", (d) => y(d.rowDisplay))\n      .attr(\"width\", x.bandwidth())\n      .attr(\"height\", y.bandwidth())\n      .style(\"fill\", (d) => colorScale(d.value))\n      .style(\"stroke\", \"#fff\");\n\n    // Text\n    g.selectAll(\".cell-text\")\n      .data(filteredCells)\n      .enter()\n      .append(\"text\")\n      .attr(\"x\", (d) => x(d.colDisplay) + x.bandwidth() / 2)\n      .attr(\"y\", (d) => y(d.rowDisplay) + y.bandwidth() / 2)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"alignment-baseline\", \"middle\")\n      .attr(\"font-size\", fontSize)\n      .attr(\"font-family\", fontFamily)\n      .attr(\"fill\", (d) => getTextColor(colorScale(d.value)))\n      .text((d) => d.value.toFixed(1));\n\n    // X-axis labels\n    g.selectAll(\".x-label\")\n      .data(displayLabels)\n      .enter()\n      .append(\"text\")\n      .attr(\"x\", (d) => x(d) + x.bandwidth() / 2)\n      .attr(\"y\", heatmapHeight + 40)\n      .attr(\n        \"transform\",\n        (d) => `rotate(45, ${x(d) + x.bandwidth() / 2}, ${heatmapHeight + 40})`\n      )\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", labelFontSize)\n      .attr(\"font-family\", fontFamily)\n      .text((d) => d);\n\n    // Y-axis labels\n    g.selectAll(\".y-label\")\n      .data(displayLabels)\n      .enter()\n      .append(\"text\")\n      .attr(\"x\", -10)\n      .attr(\"y\", (d) => y(d) + y.bandwidth() / 2)\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"font-size\", labelFontSize)\n      .attr(\"font-family\", fontFamily)\n      .text((d) => d);\n\n    // Draw legend\n    const legendSvg = d3.select(\"#legend-svg\").attr(\"width\", 80).attr(\"height\", 250);\n    const legendScale = d3\n      .scaleLinear()\n      .domain([domainStart, domainEnd])\n      .range([200, 0]);\n\n    const legendAxis = d3.axisRight(legendScale).ticks(5);\n    legendSvg.append(\"g\").attr(\"transform\", \"translate(50,20)\").call(legendAxis);\n\n    legendSvg\n      .selectAll(\"rect\")\n      .data(d3.range(domainStart, domainEnd, (domainEnd - domainStart) / 100))\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", 30)\n      .attr(\"y\", (d) => legendScale(d) + 20)\n      .attr(\"width\", 20)\n      .attr(\"height\", 2)\n      .style(\"fill\", (d) => colorScale(d));\n  }, [\n    matrixData,\n    sequenceOrder,\n    renamed,\n    showUpper,\n    domainStart,\n    domainEnd,\n    fontSize,\n    labelFontSize,\n    fontFamily,\n    heatmapWidth,\n    heatmapHeight,\n    margin,\n    getColorScale\n  ]);\n\n  useEffect(() => {\n    drawHeatmap();\n  }, [drawHeatmap]);\n\n  // ====== Download logic (unchanged) ======\n  const downloadSVG = () => {\n    const heatmapSvg = document.querySelector(\"#heatmap svg\");\n    const legendContainer = document.getElementById(\"legend-container\");\n    const legendSvg = document.getElementById(\"legend-svg\");\n    if (!heatmapSvg || !legendSvg || !legendContainer) return;\n\n    const heatmapRect = heatmapSvg.getBoundingClientRect();\n    const legendRect = legendContainer.getBoundingClientRect();\n    const offsetX = legendRect.left - heatmapRect.left;\n    const offsetY = legendRect.top - heatmapRect.top;\n\n    const finalWidth = Math.max(heatmapRect.width, offsetX + legendRect.width);\n    const finalHeight = Math.max(heatmapRect.height, offsetY + legendRect.height);\n\n    const finalSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    finalSvg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    finalSvg.setAttribute(\"width\", Math.ceil(finalWidth));\n    finalSvg.setAttribute(\"height\", Math.ceil(finalHeight));\n\n    // Clone\n    const heatmapClone = heatmapSvg.cloneNode(true);\n    const legendClone = legendSvg.cloneNode(true);\n\n    // Place\n    finalSvg.appendChild(heatmapClone);\n    legendClone.setAttribute(\"x\", offsetX);\n    legendClone.setAttribute(\"y\", offsetY);\n    finalSvg.appendChild(legendClone);\n\n    // Serialize & download\n    const serializer = new XMLSerializer();\n    const source = serializer.serializeToString(finalSvg);\n\n    const svgBlob = new Blob([source], { type: \"image/svg+xml;charset=utf-8\" });\n    const url = URL.createObjectURL(svgBlob);\n\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = url;\n    downloadLink.download = \"heatmap_with_legend.svg\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  // ====== Drag & Drop for single-order (optional, if you still want reordering) ======\n  const draggingItemIndexRef = useRef(null);\n\n  const handleDragStart = (index) => {\n    draggingItemIndexRef.current = index;\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  const reorderList = (list, fromIndex, toIndex) => {\n    const updated = [...list];\n    const [moved] = updated.splice(fromIndex, 1);\n    updated.splice(toIndex, 0, moved);\n    return updated;\n  };\n\n  const handleDrop = (e, dropIndex) => {\n    e.preventDefault();\n    const dragIndex = draggingItemIndexRef.current;\n    if (dragIndex === null || dragIndex === dropIndex) return;\n    const newOrder = reorderList(sequenceOrder, dragIndex, dropIndex);\n    setSequenceOrder(newOrder);\n    draggingItemIndexRef.current = null;\n  };\n\n  const SequenceOrderList = () => (\n    <ul className=\"list-group\" style={{ marginBottom: \"1em\" }}>\n      {sequenceOrder.map((label, index) => {\n        const displayName = renamed[label] || label;\n        return (\n          <li\n            key={label}\n            className=\"list-group-item\"\n            draggable\n            onDragStart={() => handleDragStart(index)}\n            onDragOver={handleDragOver}\n            onDrop={(e) => handleDrop(e, index)}\n            style={{ cursor: \"move\" }}\n          >\n            {displayName}\n          </li>\n        );\n      })}\n    </ul>\n  );\n\n  return (\n    <div className=\"container mt-4\">\n      <h2 className=\"mb-3\">Pairwise Identity Heatmap (Single Order for Rows & Columns)</h2>\n\n      <div className=\"row\">\n        {/* Left Column (Controls) */}\n        <div className=\"col-md-4\">\n          {/* 1) Heatmap Dimensions */}\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <label className=\"form-label\">Heatmap Width</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={heatmapWidth}\n                onChange={(e) => setHeatmapWidth(Number(e.target.value))}\n              />\n            </div>\n            <div className=\"col\">\n              <label className=\"form-label\">Heatmap Height</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={heatmapHeight}\n                onChange={(e) => setHeatmapHeight(Number(e.target.value))}\n              />\n            </div>\n          </div>\n\n          <hr />\n\n          {/* 2) Domain Start / End */}\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <label className=\"form-label\">Domain Start</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={domainStart}\n                onChange={(e) => setDomainStart(Number(e.target.value))}\n              />\n            </div>\n            <div className=\"col\">\n              <label className=\"form-label\">Domain End</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={domainEnd}\n                onChange={(e) => setDomainEnd(Number(e.target.value))}\n              />\n            </div>\n          </div>\n\n          <hr />\n\n          {/* 3) Color 1 / Color 2 */}\n          <div className=\"row mb-2\">\n            <div className=\"col d-flex align-items-center\">\n              <label className=\"form-label me-2\">Color Start</label>\n              <input\n                type=\"color\"\n                className=\"form-control form-control-color\"\n                value={color1}\n                onChange={(e) => setColor1(e.target.value)}\n              />\n            </div>\n\n            <div className=\"col d-flex align-items-center\">\n              <label className=\"form-label me-2\">Color End</label>\n              <input\n                type=\"color\"\n                className=\"form-control form-control-color\"\n                value={color2}\n                onChange={(e) => setColor2(e.target.value)}\n              />\n            </div>\n          </div>\n\n          <hr />\n\n          {/* 4) Font Size / Label Font Size / Font Family */}\n          <div className=\"row mb-3\">\n            <div className=\"col\">\n              <label className=\"form-label\">Font Size</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={fontSize}\n                onChange={(e) => setFontSize(Number(e.target.value))}\n              />\n            </div>\n            <div className=\"col\">\n              <label className=\"form-label\">Label Size</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={labelFontSize}\n                onChange={(e) => setLabelFontSize(Number(e.target.value))}\n              />\n            </div>\n            <div className=\"col\">\n              <label className=\"form-label\">Font Family</label>\n              <select\n                className=\"form-select\"\n                value={fontFamily}\n                onChange={(e) => setFontFamily(e.target.value)}\n              >\n                <option value=\"Arial\">Arial</option>\n                <option value=\"Verdana\">Verdana</option>\n                <option value=\"Times New Roman\">Times New Roman</option>\n                <option value=\"Courier New\">Courier New</option>\n              </select>\n            </div>\n          </div>\n\n          <hr />\n\n          {/* 5) Toggle & Download */}\n          <div className=\"row mb-3\">\n            <div className=\"col d-flex\">\n              <button\n                className=\"btn btn-secondary me-2\"\n                onClick={() => setShowUpper(!showUpper)}\n              >\n                Toggle Upper/Lower\n              </button>\n              <button className=\"btn btn-primary\" onClick={downloadSVG}>\n                Download SVG\n              </button>\n            </div>\n          </div>\n\n          <hr />\n\n          {/* 6) Draggable Reorder for single sequenceOrder */}\n          {sequenceOrder.length > 0 && (\n            <>\n              <h5>Reorder (Rows & Columns)</h5>\n              <SequenceOrderList />\n            </>\n          )}\n\n          <hr />\n\n          {/* 7) Rename Items */}\n          {sequenceOrder.length > 0 && (\n            <div>\n              <h5>Rename Sequences</h5>\n              {sequenceOrder.map((label) => (\n                <div key={label} className=\"mb-1 d-flex align-items-center\">\n                  <label className=\"me-1\">{label} →</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    style={{ maxWidth: \"300px\" }}\n                    value={renamed[label] || label}\n                    onChange={(e) => renameSequence(label, e.target.value)}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Right Column (Upload & Heatmap) */}\n        <div\n          className=\"col-md-8\"\n          style={{\n            top: \"10px\",\n            right: \"10px\",\n            background: \"white\",\n            padding: \"5px\",\n            borderRadius: \"5px\",\n            border: \"1px solid #ccc\",\n          }}\n        >\n          {/* CSV Upload */}\n          <div className=\"mb-3\">\n            <CSVReader onFileLoaded={handleFileLoad} />\n          </div>\n\n          {/* Heatmap */}\n          <div id=\"heatmap\"></div>\n        </div>\n      </div>\n\n      {/* Show legend ONLY AFTER data is loaded */}\n      {sequenceOrder.length > 1 && (\n        <Draggable>\n          <div\n            id=\"legend-container\"\n            style={{\n              position: \"absolute\",\n              top: \"10px\",\n              right: \"10px\",\n              background: \"white\",\n              padding: \"5px\",\n              borderRadius: \"5px\",\n              border: \"1px solid #ccc\",\n            }}\n          >\n            <h5>Legend</h5>\n            <svg id=\"legend-svg\"></svg>\n          </div>\n        </Draggable>\n      )}\n    </div>\n  );\n};\n\nexport default Heatmap;\n","import React from \"react\";\nimport Heatmap from \"./Heatmap\";\n\nfunction App() {\n  const rawData = `\n    ,ABV59991.1,GCA_900167205.1_00702,GCA_005121165.3_00523,GCA_900167205.1_00778\n    ABV59991.1,100.0,14.0,17.8,15.1\n    GCA_900167205.1_00702,14.0,100.0,39.5,10.7\n    GCA_005121165.3_00523,17.8,39.5,100.0,9.6\n    GCA_900167205.1_00778,15.1,10.7,9.6,100.0\n  `;\n\n  const parseCSV = (csv) =>\n    csv.trim().split(\"\\n\").map((line) => line.split(\",\").map((val) => val.trim()));\n\n  return <Heatmap matrixData={parseCSV(rawData)} />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./App.css\"; // Import styles\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}